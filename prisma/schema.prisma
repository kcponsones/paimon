generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String           @id @default(uuid())
  username       String?          @unique
  password       String?
  role           String?
  status         String?
  avatar         String?
  Arena          Arena[]
  Draft          Draft[]
  CharacterDraft CharacterDraft[]
  player1        Draft[]          @relation("player1")
  player2        Draft[]          @relation("player2")
  Settings       Settings[]
  ArenaPlayer    ArenaPlayer[]
}

model Settings {
  uid              String @id @default(uuid())
  user_settings_id String @unique
  bg_video_mp4     String
  bg_video_webm    String
  userID           User   @relation(fields: [user_settings_id], references: [id], onDelete: Cascade)

  @@index([user_settings_id])
}

model Characters {
  id             String           @id @default(uuid())
  name           String
  rarity         String
  vision         String
  weapon         String
  ban_audio      String?
  pick_audio     String?
  draft_picture  String
  pick_picture   String
  flash_picture  String
  is_visible     Boolean          @default(true)
  ban_picture    String
  display_name   String?
  nation         String?
  CharacterDraft CharacterDraft[]
}

model Boss {
  id             String  @id @default(uuid())
  name           String
  picture        String
  picture_choose String
  picture_flash  String
  is_visible     Boolean @default(true)
  Draft          Draft[]
}

model Arena {
  uid       String   @id @default(uuid())
  host_id   String
  mode      String?
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [host_id], references: [id], onDelete: Cascade)

  Draft       Draft[]
  ArenaPlayer ArenaPlayer[]

  @@index([host_id])
}

model ArenaPlayer {
  id         String    @id @default(uuid())
  arena_id   String
  user_id    String
  joinedDate DateTime? @default(now())
  isActive   Boolean   @default(true)
  Arena      Arena?    @relation(fields: [arena_id], references: [uid], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([arena_id])
  @@index([user_id])
}

model Draft {
  uid                  String           @id @default(uuid())
  name                 String?
  arenaID              String?
  bossID               String?
  timer                Int              @default(30)
  pause_timer          Int              @default(3)
  current_status_draft String?
  sequence             String           @db.LongText
  player1_id           String?
  player2_id           String?
  winner_user_id       String?
  player1_reroll       Boolean          @default(false)
  player2_reroll       Boolean          @default(false)
  isFinish             Boolean          @default(false)
  createdAt            DateTime?        @default(now())
  player1              User?            @relation("player1", fields: [player1_id], references: [id], onDelete: Cascade)
  player2              User?            @relation("player2", fields: [player2_id], references: [id], onDelete: Cascade)
  arena                Arena?           @relation(fields: [arenaID], references: [uid], onDelete: Cascade)
  boss                 Boss?            @relation(fields: [bossID], references: [id], onDelete: Cascade)
  user                 User?            @relation(fields: [winner_user_id], references: [id], onDelete: Cascade)
  CharacterDraft       CharacterDraft[]

  @@index([arenaID])
  @@index([bossID])
  @@index([winner_user_id])
  @@index([player1_id])
  @@index([player2_id])
}

model CharacterDraft {
  uid         String      @id @default(uuid())
  draftID     String
  characterID String?
  status      String
  index       String
  playerID    String
  createdAt   DateTime?   @default(now())
  character   Characters? @relation(fields: [characterID], references: [id], onDelete: Cascade)
  draft       Draft       @relation(fields: [draftID], references: [uid], onDelete: Cascade)
  user        User        @relation(fields: [playerID], references: [id], onDelete: Cascade)

  @@index([characterID])
  @@index([draftID])
  @@index([playerID])
}
